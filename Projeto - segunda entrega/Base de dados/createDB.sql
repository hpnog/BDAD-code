.bail ON
.mode columns
.headers on
.nullvalue NULL

PRAGMA FOREIGN_KEYS=ON;

--ELIMINA AS TABELAS SE EXISTIREM
--CRIA CADA UMA DAS TABELAS

DROP TABLE IF EXISTS NATURALIDADE;
CREATE TABLE NATURALIDADE (
	idNaturalidade INTEGER PRIMARY KEY,
	cidade TEXT NOT NULL
);

DROP TABLE IF EXISTS PERFIL;
CREATE TABLE PERFIL (
	idPerfil INTEGER PRIMARY KEY,
	idNaturalidade INTEGER REFERENCES NATURALIDADE(idNaturalidade) NOT NULL,
	contacto INTEGER NOT NULL,
	dataDeNascimento DATE NOT NULL,
	morada TEXT NOT NULL,
	nome TEXT NOT NULL,
	reputacao INTEGER DEFAULT 0,
	avatar TEXT --URL DO AVATAR
);

--AINDA NAO IMPEDE QUE HAJA DUAS AMIZADES DIFERENTES COM OS MESMOS 2 PERFIS, POSTERIORMENTE RESOLVEREMOS COM UM TRIGGER
DROP TABLE IF EXISTS AMIZADE;
CREATE TABLE AMIZADE (
	idPerfilPede INTEGER REFERENCES PERFIL(idPerfil),
	idPerfilAceita INTEGER REFERENCES PERFIL(idPerfil) CHECK (idPerfilAceita != idPerfilPede),
	aceita BOOLEAN DEFAULT FALSE,
	CONSTRAINT AMIZADE_PK PRIMARY KEY (idPerfilPede, idPerfilAceita)
);

--NAO AUMENTA O NUMRERO DE MENSAGENS NAO AUMENTA, POSTERIORMENTE RESOLVEREMOS COM TRIGGERS
DROP TABLE IF EXISTS CHAT;
CREATE TABLE CHAT (
	idChat INTEGER PRIMARY KEY,
	nome TEXT,
	numeroDeMensagens INTEGER DEFAULT 0
);

DROP TABLE IF EXISTS MENSAGEM;
CREATE TABLE MENSAGEM (
	idMensagem INTEGER PRIMARY KEY,
	idChat INTEGER REFERENCES CHAT(idChat),
	data DATE NOT NULL,
	hora TEXT NOT NULL,
	texto TEXT NOT NULL
);

DROP TABLE IF EXISTS EVENTO;
CREATE TABLE EVENTO (
	idEvento INTEGER PRIMARY KEY,
	idCriador INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	data DATE NOT NULL,
	descricao TEXT,
	local TEXT NOT NULL,
	nome TEXT NOT NULL
);

DROP TABLE IF EXISTS GRUPO;
CREATE TABLE GRUPO (
	idGrupo INTEGER PRIMARY KEY,
	idAdministrador INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	descricao TEXT,
	nome TEXT NOT NULL,
	privacidade TEXT DEFAULT 'Publico'
);

DROP TABLE IF EXISTS POST;
CREATE TABLE POST (
	idPost INTEGER PRIMARY KEY,
	idCriador INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	data DATE NOT NULL,
	hora TEXT NOT NULL,
	reputacao INTEGER DEFAULT 0,
	texto TEXT NOT NULL
);

DROP TABLE IF EXISTS POSTPERFIL;
CREATE TABLE POSTPERFIL (
	idPost INTEGER REFERENCES POST(idPost) UNIQUE NOT NULL,
	idPerfil INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	CONSTRAINT POSTPERFIL_PK PRIMARY KEY (idPost, idPerfil)
);

DROP TABLE IF EXISTS POSTGRUPO;
CREATE TABLE POSTGRUPO (
	idPost INTEGER REFERENCES POST(idPost) UNIQUE NOT NULL,
	idGrupo INTEGER REFERENCES GRUPO(idGrupo) NOT NULL,
	CONSTRAINT POSTGRUPO_PK PRIMARY KEY (idPost, idGrupo)
);
DROP TABLE IF EXISTS POSTEVENTO;
CREATE TABLE POSTEVENTO (
	idPost INTEGER REFERENCES POST(idPost) UNIQUE NOT NULL,
	idEvento INTEGER REFERENCES EVENTO(idEvento) NOT NULL,
	CONSTRAINT POSTEVENTO_PK PRIMARY KEY (idPost, idEvento)
);

DROP TABLE IF EXISTS PERFILCHAT;
CREATE TABLE PERFILCHAT (
	idPerfil INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	idChat INTEGER REFERENCES CHAT(idChat) NOT NULL,
	CONSTRAINT PERFILCHAT_PK PRIMARY KEY (idPerfil, idChat)
);

DROP TABLE IF EXISTS PERFILGRUPO;
CREATE TABLE PERFILGRUPO (
	idPerfil INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	idGrupo INTEGER REFERENCES GRUPO(idGrupo) NOT NULL,
	CONSTRAINT PERFILGRUPO_PK PRIMARY KEY (idPerfil, idGrupo)
);

DROP TABLE IF EXISTS REPUTACAO;
CREATE TABLE REPUTACAO (
	idReputacao INTEGER PRIMARY KEY,
	aceita BOOLEAN DEFAULT FALSE
);

DROP TABLE IF EXISTS REPUTACAOPERFIL;
CREATE TABLE REPUTACAOPERFIL (
	idAtribuiu INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	idPerfil INTEGER REFERENCES PERFIL(idPerfil) NOT NULL CHECK (idAtribuiu != idPerfil),
	idReputacao INTEGER REFERENCES REPUTACAO(idReputacao) UNIQUE NOT NULL,
	CONSTRAINT REPUTACAOPERFIL_PK PRIMARY KEY (idAtribuiu, idPerfil, idReputacao)
);

DROP TABLE IF EXISTS REPUTACAOPOST;
CREATE TABLE REPUTACAOPOST (
	idAtribuiu INTEGER REFERENCES PERFIL(idPerfil) NOT NULL,
	idPost INTEGER REFERENCES POST(idPost) NOT NULL,
	idReputacao INTEGER REFERENCES REPUTACAO(idReputacao) UNIQUE NOT NULL,
	CONSTRAINT REPUTACAOPERFIL_PK PRIMARY KEY (idAtribuiu, idPost, idReputacao)
);